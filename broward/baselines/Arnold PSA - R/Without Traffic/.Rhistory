knitr::opts_chunk$set(warning=F, message=F,echo = TRUE)
knitr::opts_knit$set(root.dir = '/tmp')
library(tidyverse)
library(magrittr)
library(ROCR)
library(caret)
source('baseline_util.R')
log_path = "C:/Users/binha/Documents/Duke/Cynthia Research/KY-analysis-mytrials/broward/broward models/Baseline Model Results/With Traffic/Recidivism/"
data_path = "C:/Users/binha/Documents/Duke/Cynthia Research/KY-analysis-mytrials/broward/data/"
load(paste0(data_path, "compas_psa.Rdata"))
load(paste0(data_path, "expanded_features.Rdata"))
### Add useful columns to features and apply row filters used for all models
features_filt = features_before_on %>%
inner_join(
data_before %>%
select(person_id, screening_date, people) %>%
unnest() %>%
select(person_id, screening_date, race, sex, name),
by = c("person_id","screening_date")
) %>%
mutate(sex = ifelse(sex == "Male", 0, 1)) %>% #change sex variable to numeric encoding
inner_join(features_on, by = c("person_id","screening_date")) %>%
inner_join(
psa_features%>%
select(-c(p_current_age, p_prison)), by = c("person_id","screening_date")) %>%
inner_join(outcomes, by = c("person_id","screening_date")) %>%
inner_join(
features %>%
select(person_id, screening_date, one_year, three_year, five_year),
by = c("person_id", "screening_date")) %>%
filter(`Risk of Recidivism_decile_score` != -1, `Risk of Violence_decile_score` != -1) %>% # Filter 1
filter(!is.na(current_offense_date)) %>% # Filter 3
filter(screening_date <= current_offense_date_limit) %>% # Filter 4
mutate(recid_use = as.factor(recid), # Select recidivism or violent recidivism to use in this script
decile_use = `Risk of Recidivism_decile_score`) # Select recidivism or violent recidivism decile score to use in this script
## Select features
df = features_filt %>%
transmute(
person_id,
sex,
screening_date,
#COMPAS Risk of Recidivism Features\
p_current_age,
p_age_first_offense,
p_charge,
p_jail30 = p_jail30,
p_prison = p_prison,
p_probation = p_probation,
#COMPAS Risk of violent recidivism features
p_juv_fel_count,
p_felprop_violarrest,
p_murder_arrest,
p_felassault_arrest,
p_misdemassault_arrest,
p_famviol_arrest,
p_sex_arrest,
p_weapons_arrest,
#PSA Features (which were not named above)
fail_appear_two_yr,
fail_appear_two_plus,
current_violent,
current_violent20,
pending_charge,
prior_conviction_F,
prior_conviction_M,
violent_conviction,
total_convictions,
#Misc Features
p_arrest,
p_property,
p_traffic,
p_drug,
p_dui,
p_domestic,
p_stalking,
p_voyeurism,
p_fraud,
p_stealing,
p_trespass,
one_year,
three_year,
five_year,
recid_use) %>%
na.omit()
set.seed(283)
train = sample_frac(df,.8)
test = anti_join(df, train, by = 'person_id') #change to account for screening date!
scores_outcomes = compas_psa_wide %>%
filter(`Risk of Violence_decile_score`>=0,
`Risk of Recidivism_decile_score`>=0,
`Risk of Failure to Appear_decile_score`>=0)%>%
left_join(outcomes, by=c("person_id","screening_date")) %>%
mutate(in_test = person_id %in% test$person_id)
#Only 353 obs remain when we only consider individuals in test set for Arnold PSA, so we also consider all non-na obs.
data = "arnold_nona"
if (data == "heldout_test"){scores_outcomes = scores_outcomes %>% filter(in_test == T)}
if (data == "arnold_nona"){scores_outcomes = scores_outcomes = scores_outcomes %>% filter(!is.na(arnold_nca_raw))}
pred_arnold_nca_raw = prediction(scores_outcomes$arnold_nca_raw, scores_outcomes$recid)
pred_arnold_nca = prediction(scores_outcomes$arnold_nca,scores_outcomes$recid)
pred_RR_raw = prediction(scores_outcomes$`Risk of Recidivism_raw_score`,scores_outcomes$recid)
pred_RR_decile = prediction(scores_outcomes$`Risk of Recidivism_decile_score`,scores_outcomes$recid)
riskscore_aucs = data.frame(
"Score" = c(paste0("Arnold NCA Raw ", data),
paste0("Arnold NCA ", data),
paste0("COMPAS Risk of Recid Raw ",data),
paste0("COMPAS Risk of Recid Decile f",data)),
"heldout_test_auc" = c(
performance(pred_arnold_nca_raw, "auc")@y.values[[1]],
performance(pred_arnold_nca, "auc")@y.values[[1]],
performance(pred_RR_raw, "auc")@y.values[[1]],
performance(pred_RR_decile, "auc")@y.values[[1]]
),
"heldout_test_acc" = c(
max(performance(pred_arnold_nca_raw, "acc")@y.values[[1]]),
max(performance(pred_arnold_nca, "acc")@y.values[[1]]),
max(performance(pred_RR_raw, "acc")@y.values[[1]]),
max(performance(pred_RR_decile, "acc")@y.values[[1]])
),
"Number of observations" = c(
nrow(scores_outcomes),
nrow(scores_outcomes),
nrow(scores_outcomes),
nrow(scores_outcomes)
)
)
knitr::kable(riskscore_aucs, format = 'markdown')
write.csv(riskscore_aucs, paste0(log_path, data, ".csv"))
knitr::opts_chunk$set(warning=F, message=F,echo = TRUE)
knitr::opts_knit$set(root.dir = '/tmp')
library(tidyverse)
library(magrittr)
library(ROCR)
library(caret)
source('baseline_util.R')
log_path = "C:/Users/binha/Documents/Duke/Cynthia Research/KY-analysis-mytrials/broward/broward models/Baseline Model Results/Without Traffic/Recidivism/"
data_path = "C:/Users/binha/Documents/Duke/Cynthia Research/KY-analysis-mytrials/broward/data/"
load(paste0(data_path, "compas_psa.Rdata"))
load(paste0(data_path, "expanded_features.Rdata"))
### Add useful columns to features and apply row filters used for all models
features_filt = features_before_on %>%
inner_join(
data_before %>%
select(person_id, screening_date, people) %>%
unnest() %>%
select(person_id, screening_date, race, sex, name),
by = c("person_id","screening_date")
) %>%
mutate(sex = ifelse(sex == "Male", 0, 1)) %>% #change sex variable to numeric encoding
inner_join(features_on, by = c("person_id","screening_date")) %>%
inner_join(
psa_features%>%
select(-c(p_current_age, p_prison)), by = c("person_id","screening_date")) %>%
inner_join(outcomes, by = c("person_id","screening_date")) %>%
inner_join(
features %>%
select(person_id, screening_date, one_year, three_year, five_year),
by = c("person_id", "screening_date")) %>%
filter(`Risk of Recidivism_decile_score` != -1, `Risk of Violence_decile_score` != -1) %>% # Filter 1
filter(!is.na(current_offense_date)) %>% # Filter 3
filter(screening_date <= current_offense_date_limit) %>% # Filter 4
mutate(recid_use = as.factor(recid), # Select recidivism or violent recidivism to use in this script
decile_use = `Risk of Recidivism_decile_score`) # Select recidivism or violent recidivism decile score to use in this script
## Select features
df = features_filt %>%
transmute(
person_id,
sex,
screening_date,
#COMPAS Risk of Recidivism Features\
p_current_age,
p_age_first_offense,
p_charge,
p_jail30 = p_jail30,
p_prison = p_prison,
p_probation = p_probation,
#COMPAS Risk of violent recidivism features
p_juv_fel_count,
p_felprop_violarrest,
p_murder_arrest,
p_felassault_arrest,
p_misdemassault_arrest,
p_famviol_arrest,
p_sex_arrest,
p_weapons_arrest,
#PSA Features (which were not named above)
fail_appear_two_yr,
fail_appear_two_plus,
current_violent,
current_violent20,
pending_charge,
prior_conviction_F,
prior_conviction_M,
violent_conviction,
total_convictions,
#Misc Features
p_arrest,
p_property,
p_traffic,
p_drug,
p_dui,
p_domestic,
p_stalking,
p_voyeurism,
p_fraud,
p_stealing,
p_trespass,
one_year,
three_year,
five_year,
recid_use) %>%
na.omit()
set.seed(283)
train = sample_frac(df,.8)
test = anti_join(df, train, by = 'person_id') #change to account for screening date!
scores_outcomes = compas_psa_wide %>%
filter(`Risk of Violence_decile_score`>=0,
`Risk of Recidivism_decile_score`>=0,
`Risk of Failure to Appear_decile_score`>=0)%>%
left_join(outcomes, by=c("person_id","screening_date")) %>%
mutate(in_test = person_id %in% test$person_id)
#Only 353 obs remain when we only consider individuals in test set for Arnold PSA, so we also consider all non-na obs.
data = "arnold_nona"
if (data == "heldout_test"){scores_outcomes = scores_outcomes %>% filter(in_test == T)}
if (data == "arnold_nona"){scores_outcomes = scores_outcomes = scores_outcomes %>% filter(!is.na(arnold_nca_raw))}
pred_arnold_nca_raw = prediction(scores_outcomes$arnold_nca_raw, scores_outcomes$recid)
pred_arnold_nca = prediction(scores_outcomes$arnold_nca,scores_outcomes$recid)
pred_RR_raw = prediction(scores_outcomes$`Risk of Recidivism_raw_score`,scores_outcomes$recid)
pred_RR_decile = prediction(scores_outcomes$`Risk of Recidivism_decile_score`,scores_outcomes$recid)
riskscore_aucs = data.frame(
"Score" = c(paste0("Arnold NCA Raw ", data),
paste0("Arnold NCA ", data),
paste0("COMPAS Risk of Recid Raw ",data),
paste0("COMPAS Risk of Recid Decile f",data)),
"heldout_test_auc" = c(
performance(pred_arnold_nca_raw, "auc")@y.values[[1]],
performance(pred_arnold_nca, "auc")@y.values[[1]],
performance(pred_RR_raw, "auc")@y.values[[1]],
performance(pred_RR_decile, "auc")@y.values[[1]]
),
"heldout_test_acc" = c(
max(performance(pred_arnold_nca_raw, "acc")@y.values[[1]]),
max(performance(pred_arnold_nca, "acc")@y.values[[1]]),
max(performance(pred_RR_raw, "acc")@y.values[[1]]),
max(performance(pred_RR_decile, "acc")@y.values[[1]])
),
"Number of observations" = c(
nrow(scores_outcomes),
nrow(scores_outcomes),
nrow(scores_outcomes),
nrow(scores_outcomes)
)
)
knitr::kable(riskscore_aucs, format = 'markdown')
write.csv(riskscore_aucs, paste0(log_path, data, ".csv"))
