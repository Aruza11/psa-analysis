# View(fta_prob)
# View(filter(fta_prob, Description=="File Affidavit And Warrant Violation Of Probation"|
#               Description=="Violation Of Probation Withdrawn"|
#               Description=="Violation Of Probation Warrant Dismissed"))
write.csv(fta_prob,paste0(data_path,"fta_prob.csv"))
setwd("C:/Users/Caroline Wang/OneDrive/Duke/Criminal Recidivism/broward-data")
write.csv(fta_prob,"fta_prob.csv")
rm(list=ls())
data_path="../broward-data/"
load(paste0(data_path, "Table_construction.Rdata")) #loading beau's version of data
fta_prob<-read.csv(paste0(data_path,"fta_prob.csv"))
data_path="C:/Users/Caroline Wang/OneDrive/Duke/Criminal Recidivism/broward-data/"
fta_prob<-read.csv(paste0(data_path,"fta_prob.csv"))
fta_prob<-read.csv("C:/Users/Caroline Wang/OneDrive/Duke/Criminal Recidivism/broward-data/fta_prob.csv")
rm(list=ls())
eventsdescrp_df<-read.csv(paste0(data_path, "eventsdescrp_df1.csv"))%>%
bind_rows(.,read.csv(paste0(data_path, "eventsdescrp_df2.csv")))%>%
bind_rows(.,read.csv(paste0(data_path, "eventsdescrp_df3.csv")))%>%
bind_rows(.,read.csv(paste0(data_path, "eventsdescrp_df1.csv")))
data_path = "../../broward-data/"
eventsdescrp_df<-read.csv(paste0(data_path, "eventsdescrp_df1.csv"))%>%
bind_rows(.,read.csv(paste0(data_path, "eventsdescrp_df2.csv")))%>%
bind_rows(.,read.csv(paste0(data_path, "eventsdescrp_df3.csv")))%>%
bind_rows(.,read.csv(paste0(data_path, "eventsdescrp_df1.csv")))
eventsdescrp_df$Description<-as.character(eventsdescrp_df$Description)
# View(head(eventsdescrp_df))
#All descriptions containing "probation"
# eventsdescrp_df%>%
#     filter(str_detect(Description,coll("Probation",T,ignore_case=T)))%>%
#     distinct(Description)
#failure to appear and probations
fta_prob<-eventsdescrp_df%>%
mutate(fail_appeared=if_else(str_detect(
Description,coll("D6 Failure To Appear",T,ignore_case=T))
==T,1,0),
prob_violation=case_when(str_detect(Description,coll(
"File Affidavit And Warrant Violation Of Probation",
T,ignore_case=T))~1,
str_detect(Description,coll(
"Violation Of Probation Withdrawn",T,
ignore_case=T))~-1,
str_detect(Description,coll(
"Violation Of Probation Warrant Dismissed",T,
ignore_case=T))~-1,
TRUE~0)
) %>%
select(person_id,EventDate,case_num,Description,fail_appeared, prob_violation)
# View(fta_prob)
# View(filter(fta_prob, Description=="File Affidavit And Warrant Violation Of Probation"|
#               Description=="Violation Of Probation Withdrawn"|
#               Description=="Violation Of Probation Warrant Dismissed"))
setwd("C:/Users/Caroline Wang/OneDrive/Duke/Criminal Recidivism/broward-data")
write.csv(fta_prob,"fta_prob.csv")
write.csv(fta_prob,"C:/Users/Caroline Wang/OneDrive/Duke/Criminal Recidivism/broward-data/fta_prob.csv")
write.csv(fta_prob,"C:/Users/Caroline Wang/OneDrive/Duke/Criminal Recidivism/fta_prob.csv")
fta_prob<-read.csv(paste0("../","fta_prob.csv"))
rm(eventsdescrp_df)
load(paste0(data_path, "Table_construction.Rdata")) #loading beau's version of data
data_path="C:/Users/Caroline Wang/OneDrive/Duke/Criminal Recidivism/broward-data/"
load(paste0(data_path, "Table_construction.Rdata")) #loading beau's version of data
View(head(fta_prob))
View(head(fta_prob))
View(data_before)
type(data_before$screening_date)
class(data_before$screening_date)
#data_on is df containing info for the current offense
current_violent = data_on %>%
select(person_id, screening_date, charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
group_by(person_id, screening_date)%>%
current_violent = ifelse(sum(is_violent)>0, 1, 0)%>%
current_violent20 = ifelse(current_violent == 1 & age_offense <=20, 1, 0)
current_violent = data_on %>%
select(person_id, screening_date, charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
group_by(person_id, screening_date)%>%
summarize()%>%
current_violent = ifelse(sum(is_violent)>0, 1, 0)%>%
current_violent20 = ifelse(current_violent == 1 & age_offense <=20, 1, 0)
current_violent = data_on %>%
select(person_id, screening_date, charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
group_by(person_id, screening_date)%>%
summarize(current_violent = ifelse(sum(is_violent)>0, 1, 0),
current_violent20 = ifelse(current_violent == 1 & age_offense <=20, 1, 0))
current_violent = data_on %>%
select(person_id, screening_date, charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
group_by(person_id, screening_date)%>%
summarize(current_violent = ifelse(sum(is_violent)>0, 1, 0),
current_violent20 = ifelse(current_violent == 1 & max(age_offense) <=20, 1, 0))
temp<-fta_prob%>%
distinct(person_id,EventDate,case_num,fail_appeared, prob_violation)%>%
rename(case_number=case_num)
temp$case_number=as.character(distinct_fta_prob$case_number)
temp$case_number=as.character(temp$case_number)
#data_on is df containing info for the current offense
current_violent = data_on %>%
select(person_id, screening_date, charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
group_by(person_id, screening_date)%>%
summarize(current_violent = ifelse(sum(is_violent)>0, 1, 0),
current_violent20 = ifelse(current_violent == 1 & max(age_offense) <=20, 1, 0))
temp<-fta_prob%>%
distinct(person_id,EventDate,case_num,fail_appeared, prob_violation)%>%
rename(case_number=case_num)
temp$case_number=as.character(temp$case_number)
fta <-  data_before%>%
select(person_id,screening_date,charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
select(person_id, screening_date, case_number)%>%
inner_join(temp,by=c("person_id","case_number"))%>%
mutate(EventDate=mdy(EventDate,tz="UTC"), #format = "%m/%d/%Y"
#mdy() fcn automatically converts to Date object, ymd_hms() function converts to POSIXt object, so
#specify tz="UTC" to get mdy() to convert to POSIXt object
days_bw=as.numeric(screening_date-EventDate,units="days"),
logical=days_bw<=730,
fail_appear_two_yr=if_else(logical&fail_appeared==1,1,0),
fail_appear_two_plus=if_else(!logical&fail_appeared==1,1,0)
)%>%
select(person_id,screening_date,case_number,fail_appear_two_yr,fail_appear_two_plus)%>%
group_by(person_id)%>%
summarise(fail_appear_two_yr=sum(fail_appear_two_yr),
fail_appear_two_plus=sum(fail_appear_two_plus),
)
psa_features = features%>%
select(p_current_age,
p_misdem_count_person,
p_felony_count_person,
p_prison)%>%
inner_join(fta, by=c("person_id", "screening_date"))%>%
inner_join(current_violent, by=c("person_id", "screening_date"))
View(head(fta))
rm(fta,temp,fta_prob)
convictions<-read.csv(paste0("../","convicted_from_disps.csv"))
convictions<-read.csv(paste0(data_path,"convicted_from_disps.csv"))
conv_subset <- convictions%>%
select(person_id, case_number,Charge,convicted,JudgementDate)%>%
rename(charge_number=Charge)%>%
mutate(JudgementDate=ymd(JudgementDate,tz="UTC"))%>%
group_by(case_number,charge_number)%>%
filter(JudgementDate==max(JudgementDate))
conv_subset <- convictions%>%
select(person_id, case_number,Charge,convicted,JudgementDate)%>%
rename(charge_number=Charge)%>%
mutate(JudgementDate=ymd(JudgementDate,tz="UTC"))%>%
group_by(case_number,charge_number)%>%
filter(JudgementDate==max(JudgementDate))
View(head(conv_subset))
conv_subset$case_number=as.character(conv_subset$case_number)
data_before$charge
conv_subset <- convictions%>%
select(person_id, case_number,Charge,convicted,JudgementDate)%>%
rename(charge_number=Charge)%>%
mutate(JudgementDate=ymd(JudgementDate,tz="UTC"))%>%
group_by(case_number,charge_number)%>%
filter(JudgementDate==max(JudgementDate))
conv_subset$case_number=as.character(conv_subset$case_number)
#want the latest disposition per case; some cases/charges have more than one disposition
prior_conv <- data_before%>%
select(person_id,screening_date,charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
select(person_id, screening_date, case_number,charge_number,charge_degree,
is_violent, is_felony, is_misdem)%>%
inner_join(conv_subset, by=c("person_id","case_number","charge_number"))%>%
mutate(# is_traffic=if_else(charge_degree=="(0)"|charge_degree=="(TCX)",1,0),
days_bw=as.numeric(screening_date-offense_date,units="days"),
logical=days_bw<=730,
prior_conviction_F=if_else(is_felony==1&convicted==1,1,0),
prior_conviction_M=if_else(is_misdem==1&convicted==1,1,0),
# prior_conviction_T=if_else(is_traffic==1&convicted==1,1,0),
violent_conviction=if_else(is_violent==1&convicted==1,1,0))%>%
group_by(c(person_id,screening_date))%>%
summarise(prior_conviction_F=sum(prior_conviction_F),
prior_conviction_M=sum(prior_conviction_M),
# prior_conviction_T=sum(prior_conviction_T),
violent_conviction=sum(is_violent)
)
names(conv_subset)
prior_conviction_F=if_else(is_felony==1&convicted==1,1,0),
conv_subset <- convictions%>%
select(person_id, case_number,Charge,convicted,JudgementDate)%>%
rename(charge_number=Charge)%>%
mutate(JudgementDate=ymd(JudgementDate,tz="UTC"))%>%
group_by(case_number,charge_number)%>%
filter(JudgementDate==max(JudgementDate))
conv_subset <- convictions%>%
select(person_id, case_number,Charge,convicted,JudgementDate)%>%
rename(charge_number=Charge)%>%
mutate(JudgementDate=ymd(JudgementDate,tz="UTC"))%>%
group_by(case_number,charge_number)%>%
filter(JudgementDate==max(JudgementDate))
conv_subset$case_number=as.character(conv_subset$case_number)
#want the latest disposition per case; some cases/charges have more than one disposition
prior_conv <- data_before%>%
select(person_id,screening_date,charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
select(person_id, screening_date, case_number,charge_number,charge_degree,
is_violent, is_felony, is_misdem)%>%
inner_join(conv_subset, by=c("person_id","case_number","charge_number"))%>%
mutate(# is_traffic=if_else(charge_degree=="(0)"|charge_degree=="(TCX)",1,0),
prior_conviction_F=if_else(is_felony==1&convicted==1,1,0),
prior_conviction_M=if_else(is_misdem==1&convicted==1,1,0),
# prior_conviction_T=if_else(is_traffic==1&convicted==1,1,0),
violent_conviction=if_else(is_violent==1&convicted==1,1,0))%>%
group_by(c(person_id,screening_date))%>%
summarise(prior_conviction_F=sum(prior_conviction_F),
prior_conviction_M=sum(prior_conviction_M),
# prior_conviction_T=sum(prior_conviction_T),
violent_conviction=sum(is_violent)
)
library(tidyverse)
library(stringr)
library(tidyverse)
library(magrittr)
library(lubridate)
library(reshape2)
date_in_intlist=function(offense_date,JudgementDate,intlist){
#A boolean function returns true if the offense date falls within
#any of the intervals in the intlist parameter. Because intlist
# also contains interval created by current offense date and the judgement date
#(i.e. the current interval) we create a check for this.
if(!is.na(JudgementDate)){
current_interval=interval(start=offense_date,end=JudgementDate)
}
for(int in intlist){
int=strsplit(int,split="--",fixed=T)
startint=int[[1]][1]
endint=int[[1]][2]
if(startint=="NA"|endint=="NA"){
return (NA)}
loop_interval=interval(start=startint,end=endint)
if(!is.na(JudgementDate)){
if(current_interval==loop_interval){
next
}
}
if(offense_date %within% loop_interval){
return(1)
}
}
return(0)
}
#Need: offense date, judgement date for each charge
#mdy("8-15-2008") %within% int
# int=interval(start=mdy("8-15-1998",tz="UTC"), end=mdy("8-15-2018",tz="UTC"))
offense_interval= data_before%>%
select(person_id,screening_date,charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
select(person_id, screening_date, case_number,charge_number, offense_date)%>%
mutate(offense_date=as.Date(offense_date))%>%
inner_join(conv_subset, by=c("person_id","case_number","charge_number"))%>%
mutate(interval1=as.character(interval(start=offense_date,end=JudgementDate)))%>%
group_by(person_id,screening_date)%>%
summarise(interval_list=list(interval1))
pending = data_before%>%
select(person_id,screening_date,charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
select(person_id, screening_date, case_number,charge_number, offense_date)%>%
inner_join(conv_subset, by=c("person_id","case_number","charge_number"))%>%
left_join(offense_interval, by=c("person_id","screening_date"))%>%
rowwise()%>%
mutate(offdate_in_interval=date_in_intlist(offense_date,JudgementDate, interval_list),
offdate_no_NA=ifelse(is.na(offdate_in_interval),0,offdate_in_interval)
)%>%
group_by(person_id,screening_date)%>%
summarise(pending_charge=sum(offdate_no_NA))
rm(offense_interval)
pending = data_before%>%
select(person_id,screening_date,charge)%>%
filter(charge!="NULL")%>%
unnest() %>%
select(person_id, screening_date, case_number,charge_number, offense_date)%>%
inner_join(conv_subset, by=c("person_id","case_number","charge_number"))%>%
left_join(offense_interval, by=c("person_id","screening_date"))%>%
rowwise()%>%
mutate(offdate_in_interval=date_in_intlist(offense_date,JudgementDate, interval_list),
offdate_no_NA=ifelse(is.na(offdate_in_interval),0,offdate_in_interval)
)%>%
group_by(person_id,screening_date)%>%
summarise(pending_charge=sum(offdate_no_NA))
rm(list=ls())
citation()
library(tidyverse)
library(tidyverse)
data_path = ""
load(paste0(data_path,"expanded_features.Rdata"))
View(features_before_on)
names(features_before_on)
names(features_on)
names(outcomes)
### Add useful columns to features and apply row filters used for all models
features_filt = features_before_on %>%
inner_join(
psa_features%>%
select(-c(p_current_age,p_prison)),
by = c("person_id","screening_date"))%>%
inner_join(outcomes, by = c("person_id","screening_date")) %>%
filter(`Risk of Recidivism_decile_score` != -1, `Risk of Violence_decile_score` != -1) %>% # Filter 1
filter(!is.na(current_offense_date)) %>% # Filter 3
filter(screening_date <= current_offense_date_limit) %>% # Filter 4
mutate(recid_use = as.factor(recid)) # Select recidivism or violent recidivism to use in this script
load(paste0(data_path,"compas_psa.Rdata"))
### Add useful columns to features and apply row filters used for all models
features_filt = features_before_on %>%
inner_join(
psa_features%>%
select(-c(p_current_age,p_prison)),
by = c("person_id","screening_date"))%>%
inner_join(outcomes, by = c("person_id","screening_date")) %>%
filter(`Risk of Recidivism_decile_score` != -1, `Risk of Violence_decile_score` != -1) %>% # Filter 1
filter(!is.na(current_offense_date)) %>% # Filter 3
filter(screening_date <= current_offense_date_limit) %>% # Filter 4
mutate(recid_use = as.factor(recid)) # Select recidivism or violent recidivism to use in this script
## Select features and round count features
train = features_filt %>%
transmute(
#COMPAS Risk of Recidivism Features
p_current_age,
p_age_first_offense,
p_charge,
p_jail30 = pmin(p_jail30,5),
p_prison = pmin(p_prison,5),
p_probation = pmin(p_probation,5),
#COMPAS Risk of violent recidivism features
p_juv_fel_count,
p_felprop_violarrest,
p_murder_arrest,
p_felassault_arrest,
p_misdemassault_arrest,
p_famviol_arrest,
p_sex_arrest,
p_weapons_arrest,
#Misc Features
p_arrest,
p_property,
p_traffic,
p_drug,
p_dui,
p_domestic,
p_stalking,
p_voyeurism,
p_fraud,
p_stealing,
p_trespass,
recid_use)
#label must be first column for riskSLIM
train[,c(ncol(train),2:ncol(train))]
View(train)
### Add useful columns to features and apply row filters used for all models
features_filt = features_before_on %>%
inner_join(
psa_features%>%
select(-c(p_current_age,p_prison)),
by = c("person_id","screening_date"))%>%
inner_join(outcomes, by = c("person_id","screening_date")) %>%
filter(`Risk of Recidivism_decile_score` != -1, `Risk of Violence_decile_score` != -1) %>% # Filter 1
filter(!is.na(current_offense_date)) %>% # Filter 3
filter(screening_date <= current_offense_date_limit) %>% # Filter 4
mutate(recid_use = as.factor(recid)) # Select recidivism or violent recidivism to use in this script
## Select features and round count features
train = features_filt %>%
transmute(
#COMPAS Risk of Recidivism Features (excluding age)
p_charge,
p_jail30 = pmin(p_jail30,5),
p_prison = pmin(p_prison,5),
p_probation = pmin(p_probation,5),
#COMPAS Risk of violent recidivism features
p_juv_fel_count,
p_felprop_violarrest,
p_murder_arrest,
p_felassault_arrest,
p_misdemassault_arrest,
p_famviol_arrest,
p_sex_arrest,
p_weapons_arrest,
#Misc Features
p_arrest,
p_property,
p_traffic,
p_drug,
p_dui,
p_domestic,
p_stalking,
p_voyeurism,
p_fraud,
p_stealing,
p_trespass,
#Binning age features
p_current_age,
p_age_first_offense,
p_current_age21 = if_else(p_current_age<=21, 1, 0),
p_current_age23 = if_else(p_current_age<=23, 1, 0),
p_current_age25 = if_else(p_current_age<=25, 1, 0),
p_current_age27 = if_else(p_current_age<=27, 1, 0),
p_current_age29 = if_else(p_current_age<=29, 1, 0),
p_current_age32 = if_else(p_current_age<=32, 1, 0),
p_current_age35 = if_else(p_current_age<=35, 1, 0),
p_current_age38 = if_else(p_current_age<=38, 1, 0),
p_current_age42 = if_else(p_current_age<=42, 1, 0),
p_current_age46 = if_else(p_current_age<=46, 1, 0),
p_current_age51 = if_else(p_current_age<=51, 1, 0),
p_current_age56 = if_else(p_current_age<=56, 1, 0),
p_current_age62 = if_else(p_current_age<=62, 1, 0),
p_current_age68 = if_else(p_current_age<=68, 1, 0),
p_current_age75 = if_else(p_current_age<=75, 1, 0),
p_age_first_offense21 = if_else(p_age_first_offense<=21, 1, 0),
p_age_first_offense23 = if_else(p_age_first_offense<=23, 1, 0),
p_age_first_offense25 = if_else(p_age_first_offense<=25, 1, 0),
p_age_first_offense27 = if_else(p_age_first_offense<=27, 1, 0),
p_age_first_offense29 = if_else(p_age_first_offense<=29, 1, 0),
p_age_first_offense32 = if_else(p_age_first_offense<=32, 1, 0),
p_age_first_offense35 = if_else(p_age_first_offense<=35, 1, 0),
p_age_first_offense38 = if_else(p_age_first_offense<=38, 1, 0),
p_age_first_offense42 = if_else(p_age_first_offense<=42, 1, 0),
p_age_first_offense46 = if_else(p_age_first_offense<=46, 1, 0),
p_age_first_offense51 = if_else(p_age_first_offense<=51, 1, 0),
p_age_first_offense56 = if_else(p_age_first_offense<=56, 1, 0),
p_age_first_offense62 = if_else(p_age_first_offense<=62, 1, 0),
p_age_first_offense68 = if_else(p_age_first_offense<=68, 1, 0),
p_age_first_offense75 = if_else(p_age_first_offense<=75, 1, 0),
recid_use)
#label must be first column for riskSLIM
train=train[,c(ncol(train),2:ncol(train))]
View(train)
train = features_filt %>%
transmute(
#COMPAS Risk of Recidivism Features (excluding age)
p_charge,
p_jail30 = pmin(p_jail30,5),
p_prison = pmin(p_prison,5),
p_probation = pmin(p_probation,5),
#COMPAS Risk of violent recidivism features
p_juv_fel_count,
p_felprop_violarrest,
p_murder_arrest,
p_felassault_arrest,
p_misdemassault_arrest,
p_famviol_arrest,
p_sex_arrest,
p_weapons_arrest,
#Misc Features
p_arrest,
p_property,
p_traffic,
p_drug,
p_dui,
p_domestic,
p_stalking,
p_voyeurism,
p_fraud,
p_stealing,
p_trespass,
#Binning age features
p_current_age21 = if_else(p_current_age<=21, 1, 0),
p_current_age23 = if_else(p_current_age<=23, 1, 0),
p_current_age25 = if_else(p_current_age<=25, 1, 0),
p_current_age27 = if_else(p_current_age<=27, 1, 0),
p_current_age29 = if_else(p_current_age<=29, 1, 0),
p_current_age32 = if_else(p_current_age<=32, 1, 0),
p_current_age35 = if_else(p_current_age<=35, 1, 0),
p_current_age38 = if_else(p_current_age<=38, 1, 0),
p_current_age42 = if_else(p_current_age<=42, 1, 0),
p_current_age46 = if_else(p_current_age<=46, 1, 0),
p_current_age51 = if_else(p_current_age<=51, 1, 0),
p_current_age56 = if_else(p_current_age<=56, 1, 0),
p_current_age62 = if_else(p_current_age<=62, 1, 0),
p_current_age68 = if_else(p_current_age<=68, 1, 0),
p_current_age75 = if_else(p_current_age<=75, 1, 0),
p_age_first_offense21 = if_else(p_age_first_offense<=21, 1, 0),
p_age_first_offense23 = if_else(p_age_first_offense<=23, 1, 0),
p_age_first_offense25 = if_else(p_age_first_offense<=25, 1, 0),
p_age_first_offense27 = if_else(p_age_first_offense<=27, 1, 0),
p_age_first_offense29 = if_else(p_age_first_offense<=29, 1, 0),
p_age_first_offense32 = if_else(p_age_first_offense<=32, 1, 0),
p_age_first_offense35 = if_else(p_age_first_offense<=35, 1, 0),
p_age_first_offense38 = if_else(p_age_first_offense<=38, 1, 0),
p_age_first_offense42 = if_else(p_age_first_offense<=42, 1, 0),
p_age_first_offense46 = if_else(p_age_first_offense<=46, 1, 0),
p_age_first_offense51 = if_else(p_age_first_offense<=51, 1, 0),
p_age_first_offense56 = if_else(p_age_first_offense<=56, 1, 0),
p_age_first_offense62 = if_else(p_age_first_offense<=62, 1, 0),
p_age_first_offense68 = if_else(p_age_first_offense<=68, 1, 0),
p_age_first_offense75 = if_else(p_age_first_offense<=75, 1, 0),
#label var
recid_use)
train=train[,c(ncol(train),2:ncol(train))]
write.csv(train, "riskSLIM_features.csv")
library(caret)
install.packages("caret")
library(caret)
createFolds(train$recid_use, k = 5, list = TRUE, returnTrain = True)
install.packages("Biobase")
sessionInfo()
ap["Biobase", "Depends"]
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
install.packages("installr")
library(installr)
updateR()
fdsdfs
